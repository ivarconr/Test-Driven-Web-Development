Hello world:

* Unit
	- Info til Play!Unit

* Functional
	- Info til Play!functional
	- Gå gjennom eksisterende functional

* Selenium
	- Info til selenium/selenese
	- Skriver test: Åpner "/" og verifisere tekst "hello world"
	- Gå gjennom play test, @tests se at testen feiler
	- Fiks feilende test (endre i view)

* Info om:
	- Remote debug


Todo:

* Functional "get /todo/add"
	1 Verifiser http-status
	1 Fiks ved å lage en controller og en tom "add"-metode 

* Selenium "get /todo/add"
	1 Verifiser "Not applicationerror", og tittel
	1 Verifiser at den feiler
	1 Fiks test -> oppdatere controller med render  og lage view

	2 Presentere form-struktur, action= "todo/create"
	2 Verifiser inputelementer i form
	2 Legg til inputelementer, beskrivelse, prioritet for å fikse test
	
* Functional "post /todo"
	* Vis hvordan man kan teste POST i Play!
	* Lag en hashmap _uten_ params, og POST til /todo
	* Skriv funksjonen "create", tar ikke i mot argumenter

* Unit 
	1 Lag en test som kan opprette en Todo
	1 Verifiser at variablene blir satt (beskrivelse og prioritet)
	
	2 Lag en test som lagrer todo, verifiser at den får en ID når den kommer tilbake
	
	3 Lag en test som som lager en todo og setter beskrivelse og pri
	3 Save modellen
	3 Verifiser at den blir lagret -> at db inneholder en verdi
	3 Fiks feilende test ved å annotere med @Entity
	3 Verifiser at feltene i den lagrede versjonen er riktig

	4 Lag en test som ligner på 3) men lagrer to todos
	4 Fiks test ved å legge til setupmetode, fixtures.deletedatabase
	
	// Vurder å ta denne senere (ellers Validation.current().valid(todo).ok):
	5 Lag en test som verifiserer validering på prioritet (min 1 og max 3), og at begge felter er tilgjengelige. Bruk todo.hasErrors()
	5 Se at testen feiler
	5 Implementer med @Min

* Functional "post /todo"
	1 Info om autobinding av Play og manuelt hente properties 
	1 Utvid testen som finnes ved å sende med parametere - gyldige parametere så vi slipper å oppdatere testen senere?
	1 Se at testen feiler
	1 Fiks utvide "create" med å ta i mot mot en "Todo"-modell og lagrer den
	
	2 Info om validering, info om HTTP-status-koder
	2 Lag en test som verifiserer at beskrivelse må være med (ved å assert headerEquals("Location"))
	2 Se at testen feiler
	2 Fiks modell med validering
	2 Fiks controller med todo.validateAndSave og kall badRequest hvis den ikke validerer

	3 Lag en test som verifiserer at prioritet skal være med, tilsvarende testen over
	3 Se at testen feiler
	3 Fiks modell med @required og @min(1)

	4 Lag en test som verifiserer at prioritet er maks 3
	4 Se at testen feiler
	4 Fiks med @max(3)

	5 Oppdater test som POST'er OK til å kreve redirect
	5 Se at test feiler
	5 Fiks kontroller med redirect til index (lag metoden) etter OK save

	6 Vurder en refaktorerings-iterasjon ved å gjøre om binding til autobinding


* Selenium
	1 Info om ifError, #{errors} og validation.keep() 
	1 Skriv en test at en invalid POST gir text present "Error"
	1 Fiks ved å implementere validation.keep() og oppdatere viewet. Bruk #{ifErrors}


Liste todos

* Selenium "index /todo"
	1 Info om render() med argumenter, husk å spare på variabelen
	1 Skriv en test at todos blir vist i lista, verifytextpresent
	1 Fiks ved å oppdatere index.html med en liste, og render med alle todos
	
* Unit, test sortering
	1 La de finne ut av hvordan de skal gjøre dette selv
	1 Skriv test som oppretter noen Todos og krever at de er sortert etter prioritet
	1 Se at det feiler
	1 Implementer i modell

* Unit, test sortering etter alfabetisk etter sortering
	1 Skriv test som oppretter Todos og krever at de er sortert etter pri, så etter beskrivelse
	1 Se at det feiler
	1 Implementer i eksisterende modell

* Selenium, test at viewet bruker den sorterte lista
	1 Info om fixtures
	1 Skriv fixtures
	1 Skriv en test som tester at elementene i lista er riktig sortert med nth-child
	1 Se at det feiler
	1 Oppdater controller med å bruke sorteringsmetoden

* Funksjonell, test som ser at /todo gir Index
	1 Info om routes
	1 Skriv en test som henter /todo
	1 Se at den feiler
	1 Oppdater routes
